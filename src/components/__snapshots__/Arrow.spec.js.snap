// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Arrow component should render with matching props 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Arrow
    direction="left"
    onClick={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "direction": "left",
      "onClick": [MockFunction],
    },
    "ref": null,
    "rendered": Object {
      "instance": <button
        class="slider__arrow slider__arrow--left"
      >
        <span
          class="sr--only"
        >
          left
        </span>
        <svg
          class="icon icon--left"
        >
          <use
            xlink:href="#icons_left"
          />
        </svg>
      </button>,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="sr--only"
          >
            left
          </span>,
          <Icon
            name="left"
          />,
        ],
        "className": "slider__arrow slider__arrow--left",
        "onClick": [MockFunction],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": <span
            class="sr--only"
          >
            left
          </span>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "left",
            "className": "sr--only",
          },
          "ref": null,
          "rendered": Array [
            "left",
          ],
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "name": "left",
          },
          "ref": null,
          "rendered": Object {
            "instance": <svg
              class="icon icon--left"
            >
              <use
                xlink:href="#icons_left"
              />
            </svg>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <use
                xlinkHref="#icons_left"
              />,
              "className": "icon icon--left",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <use
                  xlink:href="#icons_left"
                />,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "xlinkHref": "#icons_left",
                },
                "ref": null,
                "rendered": Array [
                  undefined,
                ],
                "type": "use",
              },
            ],
            "type": "svg",
          },
          "type": [Function],
        },
      ],
      "type": "button",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "direction": "left",
        "onClick": [MockFunction],
      },
      "ref": null,
      "rendered": Object {
        "instance": <button
          class="slider__arrow slider__arrow--left"
        >
          <span
            class="sr--only"
          >
            left
          </span>
          <svg
            class="icon icon--left"
          >
            <use
              xlink:href="#icons_left"
            />
          </svg>
        </button>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="sr--only"
            >
              left
            </span>,
            <Icon
              name="left"
            />,
          ],
          "className": "slider__arrow slider__arrow--left",
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <span
              class="sr--only"
            >
              left
            </span>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "left",
              "className": "sr--only",
            },
            "ref": null,
            "rendered": Array [
              "left",
            ],
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "name": "left",
            },
            "ref": null,
            "rendered": Object {
              "instance": <svg
                class="icon icon--left"
              >
                <use
                  xlink:href="#icons_left"
                />
              </svg>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <use
                  xlinkHref="#icons_left"
                />,
                "className": "icon icon--left",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <use
                    xlink:href="#icons_left"
                  />,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "xlinkHref": "#icons_left",
                  },
                  "ref": null,
                  "rendered": Array [
                    undefined,
                  ],
                  "type": "use",
                },
              ],
              "type": "svg",
            },
            "type": [Function],
          },
        ],
        "type": "button",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
